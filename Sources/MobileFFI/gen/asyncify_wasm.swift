// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(asyncify_wasmFFI)
import asyncify_wasmFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_asyncify_wasm_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_asyncify_wasm_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureAsyncifyWasmInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate final class UniffiHandleMap<T>: @unchecked Sendable {
    // All mutation happens with this lock held, which is why we implement @unchecked Sendable.
    private let lock = NSLock()
    private var map: [UInt64: T] = [:]
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterDouble: FfiConverterPrimitive {
    typealias FfiType = Double
    typealias SwiftType = Double

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Double {
        return try lift(readDouble(&buf))
    }

    public static func write(_ value: Double, into buf: inout [UInt8]) {
        writeDouble(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return Data(try readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}




public protocol AsyncifyWasmProtocol: AnyObject {
    
    func call(cmd: Data) async throws  -> Data
    
    /**
     * Start engine with specified wasm file path and options
     */
    func start(path: String?, opts: Options?) async throws 
    
}
open class AsyncifyWasm: AsyncifyWasmProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_asyncify_wasm_fn_clone_asyncifywasm(self.pointer, $0) }
    }
public convenience init() {
    let pointer =
        try! rustCall() {
    uniffi_asyncify_wasm_fn_constructor_asyncifywasm_new($0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_asyncify_wasm_fn_free_asyncifywasm(pointer, $0) }
    }

    

    
open func call(cmd: Data)async throws  -> Data  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_asyncify_wasm_fn_method_asyncifywasm_call(
                    self.uniffiClonePointer(),
                    FfiConverterData.lower(cmd)
                )
            },
            pollFunc: ffi_asyncify_wasm_rust_future_poll_rust_buffer,
            completeFunc: ffi_asyncify_wasm_rust_future_complete_rust_buffer,
            freeFunc: ffi_asyncify_wasm_rust_future_free_rust_buffer,
            liftFunc: FfiConverterData.lift,
            errorHandler: FfiConverterTypeAsyncifyWasmError.lift
        )
}
    
    /**
     * Start engine with specified wasm file path and options
     */
open func start(path: String?, opts: Options?)async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_asyncify_wasm_fn_method_asyncifywasm_start(
                    self.uniffiClonePointer(),
                    FfiConverterOptionString.lower(path),FfiConverterOptionTypeOptions.lower(opts)
                )
            },
            pollFunc: ffi_asyncify_wasm_rust_future_poll_void,
            completeFunc: ffi_asyncify_wasm_rust_future_complete_void,
            freeFunc: ffi_asyncify_wasm_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeAsyncifyWasmError.lift
        )
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAsyncifyWasm: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = AsyncifyWasm

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> AsyncifyWasm {
        return AsyncifyWasm(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: AsyncifyWasm) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AsyncifyWasm {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: AsyncifyWasm, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAsyncifyWasm_lift(_ pointer: UnsafeMutableRawPointer) throws -> AsyncifyWasm {
    return try FfiConverterTypeAsyncifyWasm.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAsyncifyWasm_lower(_ value: AsyncifyWasm) -> UnsafeMutableRawPointer {
    return FfiConverterTypeAsyncifyWasm.lower(value)
}






public protocol AsyncifyWasmProvider: AnyObject {
    
    func flowOptions() throws  -> FlowOptions
    
    func updateOptions() throws  -> UpdateOptions
    
    func stateChanged(state: EngineState) 
    
    func setSharedPreferences(key: String, value: Data) 
    
    func getSharedPreferences(key: String)  -> Data?
    
}
open class AsyncifyWasmProviderImpl: AsyncifyWasmProvider, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_asyncify_wasm_fn_clone_asyncifywasmprovider(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_asyncify_wasm_fn_free_asyncifywasmprovider(pointer, $0) }
    }

    

    
open func flowOptions()throws  -> FlowOptions  {
    return try  FfiConverterTypeFlowOptions_lift(try rustCallWithError(FfiConverterTypeAsyncifyWasmError_lift) {
    uniffi_asyncify_wasm_fn_method_asyncifywasmprovider_flow_options(self.uniffiClonePointer(),$0
    )
})
}
    
open func updateOptions()throws  -> UpdateOptions  {
    return try  FfiConverterTypeUpdateOptions_lift(try rustCallWithError(FfiConverterTypeAsyncifyWasmError_lift) {
    uniffi_asyncify_wasm_fn_method_asyncifywasmprovider_update_options(self.uniffiClonePointer(),$0
    )
})
}
    
open func stateChanged(state: EngineState)  {try! rustCall() {
    uniffi_asyncify_wasm_fn_method_asyncifywasmprovider_state_changed(self.uniffiClonePointer(),
        FfiConverterTypeEngineState_lower(state),$0
    )
}
}
    
open func setSharedPreferences(key: String, value: Data)  {try! rustCall() {
    uniffi_asyncify_wasm_fn_method_asyncifywasmprovider_set_shared_preferences(self.uniffiClonePointer(),
        FfiConverterString.lower(key),
        FfiConverterData.lower(value),$0
    )
}
}
    
open func getSharedPreferences(key: String) -> Data?  {
    return try!  FfiConverterOptionData.lift(try! rustCall() {
    uniffi_asyncify_wasm_fn_method_asyncifywasmprovider_get_shared_preferences(self.uniffiClonePointer(),
        FfiConverterString.lower(key),$0
    )
})
}
    

}
// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0
// Callback return codes
private let UNIFFI_CALLBACK_SUCCESS: Int32 = 0
private let UNIFFI_CALLBACK_ERROR: Int32 = 1
private let UNIFFI_CALLBACK_UNEXPECTED_ERROR: Int32 = 2

// Put the implementation in a struct so we don't pollute the top-level namespace
fileprivate struct UniffiCallbackInterfaceAsyncifyWasmProvider {

    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    //
    // This creates 1-element array, since this seems to be the only way to construct a const
    // pointer that we can pass to the Rust code.
    static let vtable: [UniffiVTableCallbackInterfaceAsyncifyWasmProvider] = [UniffiVTableCallbackInterfaceAsyncifyWasmProvider(
        flowOptions: { (
            uniffiHandle: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<RustBuffer>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> FlowOptions in
                guard let uniffiObj = try? FfiConverterTypeAsyncifyWasmProvider.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.flowOptions(
                )
            }

            
            let writeReturn = { uniffiOutReturn.pointee = FfiConverterTypeFlowOptions_lower($0) }
            uniffiTraitInterfaceCallWithError(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn,
                lowerError: FfiConverterTypeAsyncifyWasmError_lower
            )
        },
        updateOptions: { (
            uniffiHandle: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<RustBuffer>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> UpdateOptions in
                guard let uniffiObj = try? FfiConverterTypeAsyncifyWasmProvider.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.updateOptions(
                )
            }

            
            let writeReturn = { uniffiOutReturn.pointee = FfiConverterTypeUpdateOptions_lower($0) }
            uniffiTraitInterfaceCallWithError(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn,
                lowerError: FfiConverterTypeAsyncifyWasmError_lower
            )
        },
        stateChanged: { (
            uniffiHandle: UInt64,
            state: RustBuffer,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterTypeAsyncifyWasmProvider.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.stateChanged(
                     state: try FfiConverterTypeEngineState_lift(state)
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        setSharedPreferences: { (
            uniffiHandle: UInt64,
            key: RustBuffer,
            value: RustBuffer,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterTypeAsyncifyWasmProvider.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.setSharedPreferences(
                     key: try FfiConverterString.lift(key),
                     value: try FfiConverterData.lift(value)
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        getSharedPreferences: { (
            uniffiHandle: UInt64,
            key: RustBuffer,
            uniffiOutReturn: UnsafeMutablePointer<RustBuffer>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> Data? in
                guard let uniffiObj = try? FfiConverterTypeAsyncifyWasmProvider.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.getSharedPreferences(
                     key: try FfiConverterString.lift(key)
                )
            }

            
            let writeReturn = { uniffiOutReturn.pointee = FfiConverterOptionData.lower($0) }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) -> () in
            let result = try? FfiConverterTypeAsyncifyWasmProvider.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface AsyncifyWasmProvider: handle missing in uniffiFree")
            }
        }
    )]
}

private func uniffiCallbackInitAsyncifyWasmProvider() {
    uniffi_asyncify_wasm_fn_init_callback_vtable_asyncifywasmprovider(UniffiCallbackInterfaceAsyncifyWasmProvider.vtable)
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAsyncifyWasmProvider: FfiConverter {
    fileprivate static let handleMap = UniffiHandleMap<AsyncifyWasmProvider>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = AsyncifyWasmProvider

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> AsyncifyWasmProvider {
        return AsyncifyWasmProviderImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: AsyncifyWasmProvider) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AsyncifyWasmProvider {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: AsyncifyWasmProvider, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAsyncifyWasmProvider_lift(_ pointer: UnsafeMutableRawPointer) throws -> AsyncifyWasmProvider {
    return try FfiConverterTypeAsyncifyWasmProvider.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAsyncifyWasmProvider_lower(_ value: AsyncifyWasmProvider) -> UnsafeMutableRawPointer {
    return FfiConverterTypeAsyncifyWasmProvider.lower(value)
}




public struct Options {
    public var wasm: WasmOptions?
    public var provider: AsyncifyWasmProvider?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(wasm: WasmOptions?, provider: AsyncifyWasmProvider?) {
        self.wasm = wasm
        self.provider = provider
    }
}

#if compiler(>=6)
extension Options: Sendable {}
#endif



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeOptions: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Options {
        return
            try Options(
                wasm: FfiConverterOptionTypeWasmOptions.read(from: &buf), 
                provider: FfiConverterOptionTypeAsyncifyWasmProvider.read(from: &buf)
        )
    }

    public static func write(_ value: Options, into buf: inout [UInt8]) {
        FfiConverterOptionTypeWasmOptions.write(value.wasm, into: &buf)
        FfiConverterOptionTypeAsyncifyWasmProvider.write(value.provider, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeOptions_lift(_ buf: RustBuffer) throws -> Options {
    return try FfiConverterTypeOptions.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeOptions_lower(_ value: Options) -> RustBuffer {
    return FfiConverterTypeOptions.lower(value)
}


public struct UpdateOptions {
    /**
     * dir to storage
     */
    public var bundleDir: String
    /**
     * Check update interval
     */
    public var checkInterval: UInt64?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * dir to storage
         */bundleDir: String, 
        /**
         * Check update interval
         */checkInterval: UInt64?) {
        self.bundleDir = bundleDir
        self.checkInterval = checkInterval
    }
}

#if compiler(>=6)
extension UpdateOptions: Sendable {}
#endif


extension UpdateOptions: Equatable, Hashable {
    public static func ==(lhs: UpdateOptions, rhs: UpdateOptions) -> Bool {
        if lhs.bundleDir != rhs.bundleDir {
            return false
        }
        if lhs.checkInterval != rhs.checkInterval {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(bundleDir)
        hasher.combine(checkInterval)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeUpdateOptions: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UpdateOptions {
        return
            try UpdateOptions(
                bundleDir: FfiConverterString.read(from: &buf), 
                checkInterval: FfiConverterOptionUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: UpdateOptions, into buf: inout [UInt8]) {
        FfiConverterString.write(value.bundleDir, into: &buf)
        FfiConverterOptionUInt64.write(value.checkInterval, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUpdateOptions_lift(_ buf: RustBuffer) throws -> UpdateOptions {
    return try FfiConverterTypeUpdateOptions.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUpdateOptions_lower(_ value: UpdateOptions) -> RustBuffer {
    return FfiConverterTypeUpdateOptions.lower(value)
}


public struct WaFuture {
    public var data: UInt32
    public var len: UInt32
    public var callback: UInt32
    public var context: UInt32
    public var contextLen: UInt32
    public var index: UInt32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(data: UInt32, len: UInt32, callback: UInt32, context: UInt32, contextLen: UInt32, index: UInt32) {
        self.data = data
        self.len = len
        self.callback = callback
        self.context = context
        self.contextLen = contextLen
        self.index = index
    }
}

#if compiler(>=6)
extension WaFuture: Sendable {}
#endif


extension WaFuture: Equatable, Hashable {
    public static func ==(lhs: WaFuture, rhs: WaFuture) -> Bool {
        if lhs.data != rhs.data {
            return false
        }
        if lhs.len != rhs.len {
            return false
        }
        if lhs.callback != rhs.callback {
            return false
        }
        if lhs.context != rhs.context {
            return false
        }
        if lhs.contextLen != rhs.contextLen {
            return false
        }
        if lhs.index != rhs.index {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(data)
        hasher.combine(len)
        hasher.combine(callback)
        hasher.combine(context)
        hasher.combine(contextLen)
        hasher.combine(index)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeWaFuture: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WaFuture {
        return
            try WaFuture(
                data: FfiConverterUInt32.read(from: &buf), 
                len: FfiConverterUInt32.read(from: &buf), 
                callback: FfiConverterUInt32.read(from: &buf), 
                context: FfiConverterUInt32.read(from: &buf), 
                contextLen: FfiConverterUInt32.read(from: &buf), 
                index: FfiConverterUInt32.read(from: &buf)
        )
    }

    public static func write(_ value: WaFuture, into buf: inout [UInt8]) {
        FfiConverterUInt32.write(value.data, into: &buf)
        FfiConverterUInt32.write(value.len, into: &buf)
        FfiConverterUInt32.write(value.callback, into: &buf)
        FfiConverterUInt32.write(value.context, into: &buf)
        FfiConverterUInt32.write(value.contextLen, into: &buf)
        FfiConverterUInt32.write(value.index, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWaFuture_lift(_ buf: RustBuffer) throws -> WaFuture {
    return try FfiConverterTypeWaFuture.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWaFuture_lower(_ value: WaFuture) -> RustBuffer {
    return FfiConverterTypeWaFuture.lower(value)
}


public struct WaString {
    public var ptr: UInt32
    public var len: UInt32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(ptr: UInt32, len: UInt32) {
        self.ptr = ptr
        self.len = len
    }
}

#if compiler(>=6)
extension WaString: Sendable {}
#endif


extension WaString: Equatable, Hashable {
    public static func ==(lhs: WaString, rhs: WaString) -> Bool {
        if lhs.ptr != rhs.ptr {
            return false
        }
        if lhs.len != rhs.len {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(ptr)
        hasher.combine(len)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeWaString: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WaString {
        return
            try WaString(
                ptr: FfiConverterUInt32.read(from: &buf), 
                len: FfiConverterUInt32.read(from: &buf)
        )
    }

    public static func write(_ value: WaString, into buf: inout [UInt8]) {
        FfiConverterUInt32.write(value.ptr, into: &buf)
        FfiConverterUInt32.write(value.len, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWaString_lift(_ buf: RustBuffer) throws -> WaString {
    return try FfiConverterTypeWaString.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWaString_lower(_ value: WaString) -> RustBuffer {
    return FfiConverterTypeWaString.lower(value)
}


public enum AsyncifyWasmError {

    
    
    case WasmRuntime(reason: String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAsyncifyWasmError: FfiConverterRustBuffer {
    typealias SwiftType = AsyncifyWasmError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AsyncifyWasmError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .WasmRuntime(
            reason: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: AsyncifyWasmError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .WasmRuntime(reason):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(reason, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAsyncifyWasmError_lift(_ buf: RustBuffer) throws -> AsyncifyWasmError {
    return try FfiConverterTypeAsyncifyWasmError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAsyncifyWasmError_lower(_ value: AsyncifyWasmError) -> RustBuffer {
    return FfiConverterTypeAsyncifyWasmError.lower(value)
}


extension AsyncifyWasmError: Equatable, Hashable {}



extension AsyncifyWasmError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}


// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum EngineState {
    
    case stopped
    case starting
    case updating(Double
    )
    case reload(EngineVersion
    )
    case running(EngineVersion
    )
    case releasing
    case failed(String
    )
}


#if compiler(>=6)
extension EngineState: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeEngineState: FfiConverterRustBuffer {
    typealias SwiftType = EngineState

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> EngineState {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .stopped
        
        case 2: return .starting
        
        case 3: return .updating(try FfiConverterDouble.read(from: &buf)
        )
        
        case 4: return .reload(try FfiConverterTypeEngineVersion.read(from: &buf)
        )
        
        case 5: return .running(try FfiConverterTypeEngineVersion.read(from: &buf)
        )
        
        case 6: return .releasing
        
        case 7: return .failed(try FfiConverterString.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: EngineState, into buf: inout [UInt8]) {
        switch value {
        
        
        case .stopped:
            writeInt(&buf, Int32(1))
        
        
        case .starting:
            writeInt(&buf, Int32(2))
        
        
        case let .updating(v1):
            writeInt(&buf, Int32(3))
            FfiConverterDouble.write(v1, into: &buf)
            
        
        case let .reload(v1):
            writeInt(&buf, Int32(4))
            FfiConverterTypeEngineVersion.write(v1, into: &buf)
            
        
        case let .running(v1):
            writeInt(&buf, Int32(5))
            FfiConverterTypeEngineVersion.write(v1, into: &buf)
            
        
        case .releasing:
            writeInt(&buf, Int32(6))
        
        
        case let .failed(v1):
            writeInt(&buf, Int32(7))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEngineState_lift(_ buf: RustBuffer) throws -> EngineState {
    return try FfiConverterTypeEngineState.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEngineState_lower(_ value: EngineState) -> RustBuffer {
    return FfiConverterTypeEngineState.lower(value)
}


extension EngineState: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum WasmOptions {
    
    case wasmtime(
        /**
         * Default is `pulley64`
         */target: String?, 
        /**
         * Default is 100MB
         */memoryReversation: UInt64?, 
        /**
         * Default is 50MB
         */memoryReversationForGrowth: UInt64?, 
        /**
         * By default, linear memory will not be limited.
         */storeMemorySize: UInt64?, 
        /**
         * Default is 5 on mobile
         */instancePoolSize: UInt64?
    )
}


#if compiler(>=6)
extension WasmOptions: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeWasmOptions: FfiConverterRustBuffer {
    typealias SwiftType = WasmOptions

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WasmOptions {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .wasmtime(target: try FfiConverterOptionString.read(from: &buf), memoryReversation: try FfiConverterOptionUInt64.read(from: &buf), memoryReversationForGrowth: try FfiConverterOptionUInt64.read(from: &buf), storeMemorySize: try FfiConverterOptionUInt64.read(from: &buf), instancePoolSize: try FfiConverterOptionUInt64.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: WasmOptions, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .wasmtime(target,memoryReversation,memoryReversationForGrowth,storeMemorySize,instancePoolSize):
            writeInt(&buf, Int32(1))
            FfiConverterOptionString.write(target, into: &buf)
            FfiConverterOptionUInt64.write(memoryReversation, into: &buf)
            FfiConverterOptionUInt64.write(memoryReversationForGrowth, into: &buf)
            FfiConverterOptionUInt64.write(storeMemorySize, into: &buf)
            FfiConverterOptionUInt64.write(instancePoolSize, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWasmOptions_lift(_ buf: RustBuffer) throws -> WasmOptions {
    return try FfiConverterTypeWasmOptions.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWasmOptions_lower(_ value: WasmOptions) -> RustBuffer {
    return FfiConverterTypeWasmOptions.lower(value)
}


extension WasmOptions: Equatable, Hashable {}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionUInt64: FfiConverterRustBuffer {
    typealias SwiftType = UInt64?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt64.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt64.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionData: FfiConverterRustBuffer {
    typealias SwiftType = Data?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterData.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterData.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeAsyncifyWasmProvider: FfiConverterRustBuffer {
    typealias SwiftType = AsyncifyWasmProvider?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeAsyncifyWasmProvider.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeAsyncifyWasmProvider.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeOptions: FfiConverterRustBuffer {
    typealias SwiftType = Options?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeOptions.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeOptions.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeWasmOptions: FfiConverterRustBuffer {
    typealias SwiftType = WasmOptions?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeWasmOptions.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeWasmOptions.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}


/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias EngineVersion = Data

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeEngineVersion: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> EngineVersion {
        return try FfiConverterData.read(from: &buf)
    }

    public static func write(_ value: EngineVersion, into buf: inout [UInt8]) {
        return FfiConverterData.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> EngineVersion {
        return try FfiConverterData.lift(value)
    }

    public static func lower(_ value: EngineVersion) -> RustBuffer {
        return FfiConverterData.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEngineVersion_lift(_ value: RustBuffer) throws -> EngineVersion {
    return try FfiConverterTypeEngineVersion.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEngineVersion_lower(_ value: EngineVersion) -> RustBuffer {
    return FfiConverterTypeEngineVersion.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias FlowOptions = Data

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFlowOptions: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FlowOptions {
        return try FfiConverterData.read(from: &buf)
    }

    public static func write(_ value: FlowOptions, into buf: inout [UInt8]) {
        return FfiConverterData.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> FlowOptions {
        return try FfiConverterData.lift(value)
    }

    public static func lower(_ value: FlowOptions) -> RustBuffer {
        return FfiConverterData.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFlowOptions_lift(_ value: RustBuffer) throws -> FlowOptions {
    return try FfiConverterTypeFlowOptions.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFlowOptions_lower(_ value: FlowOptions) -> RustBuffer {
    return FfiConverterTypeFlowOptions.lower(value)
}

private let UNIFFI_RUST_FUTURE_POLL_READY: Int8 = 0
private let UNIFFI_RUST_FUTURE_POLL_MAYBE_READY: Int8 = 1

fileprivate let uniffiContinuationHandleMap = UniffiHandleMap<UnsafeContinuation<Int8, Never>>()

fileprivate func uniffiRustCallAsync<F, T>(
    rustFutureFunc: () -> UInt64,
    pollFunc: (UInt64, @escaping UniffiRustFutureContinuationCallback, UInt64) -> (),
    completeFunc: (UInt64, UnsafeMutablePointer<RustCallStatus>) -> F,
    freeFunc: (UInt64) -> (),
    liftFunc: (F) throws -> T,
    errorHandler: ((RustBuffer) throws -> Swift.Error)?
) async throws -> T {
    // Make sure to call the ensure init function since future creation doesn't have a
    // RustCallStatus param, so doesn't use makeRustCall()
    uniffiEnsureAsyncifyWasmInitialized()
    let rustFuture = rustFutureFunc()
    defer {
        freeFunc(rustFuture)
    }
    var pollResult: Int8;
    repeat {
        pollResult = await withUnsafeContinuation {
            pollFunc(
                rustFuture,
                uniffiFutureContinuationCallback,
                uniffiContinuationHandleMap.insert(obj: $0)
            )
        }
    } while pollResult != UNIFFI_RUST_FUTURE_POLL_READY

    return try liftFunc(makeRustCall(
        { completeFunc(rustFuture, $0) },
        errorHandler: errorHandler
    ))
}

// Callback handlers for an async calls.  These are invoked by Rust when the future is ready.  They
// lift the return value or error and resume the suspended function.
fileprivate func uniffiFutureContinuationCallback(handle: UInt64, pollResult: Int8) {
    if let continuation = try? uniffiContinuationHandleMap.remove(handle: handle) {
        continuation.resume(returning: pollResult)
    } else {
        print("uniffiFutureContinuationCallback invalid handle")
    }
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private let initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 29
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_asyncify_wasm_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_asyncify_wasm_checksum_method_asyncifywasm_call() != 2879) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_asyncify_wasm_checksum_method_asyncifywasm_start() != 1002) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_asyncify_wasm_checksum_method_asyncifywasmprovider_flow_options() != 10786) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_asyncify_wasm_checksum_method_asyncifywasmprovider_update_options() != 465) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_asyncify_wasm_checksum_method_asyncifywasmprovider_state_changed() != 47016) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_asyncify_wasm_checksum_method_asyncifywasmprovider_set_shared_preferences() != 54901) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_asyncify_wasm_checksum_method_asyncifywasmprovider_get_shared_preferences() != 40935) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_asyncify_wasm_checksum_constructor_asyncifywasm_new() != 48304) {
        return InitializationResult.apiChecksumMismatch
    }

    uniffiCallbackInitAsyncifyWasmProvider()
    return InitializationResult.ok
}()

// Make the ensure init function public so that other modules which have external type references to
// our types can call it.
public func uniffiEnsureAsyncifyWasmInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all