// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: music.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "Music.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(GPBStruct);
GPBObjCClassDeclaration(WAMusicAuthor);
GPBObjCClassDeclaration(WAMusicEntry);
GPBObjCClassDeclaration(WAMusicListOptions);
GPBObjCClassDeclaration(WAMusicListOptions_Discover);
GPBObjCClassDeclaration(WAMusicListOptions_Search);
GPBObjCClassDeclaration(WAMusicListSuggestions);
GPBObjCClassDeclaration(WAMusicListTracks);
GPBObjCClassDeclaration(WAMusicOptions);
GPBObjCClassDeclaration(WAMusicTrack);
GPBObjCClassDeclaration(WAMusicTrackDetails);
GPBObjCClassDeclaration(WAMusicTrackDetails_Format);
GPBObjCClassDeclaration(WAMusicTranscript);
GPBObjCClassDeclaration(WAMusicTranscript_Segment);

#pragma mark - WAMusicMusicRoot

@implementation WAMusicMusicRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription WAMusicMusicRoot_FileDescription = {
  .package = "asyncify.music",
  .prefix = "WAMusic",
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - WAMusicOptions

@implementation WAMusicOptions

@dynamic provider;

typedef struct WAMusicOptions__storage_ {
  uint32_t _has_storage_[1];
  NSString *provider;
} WAMusicOptions__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "provider",
        .dataTypeSpecific.clazz = Nil,
        .number = WAMusicOptions_FieldNumber_Provider,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WAMusicOptions__storage_, provider),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(WAMusicOptions)
                                   messageName:@"Options"
                               fileDescription:&WAMusicMusicRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WAMusicOptions__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WAMusicListOptions

@implementation WAMusicListOptions

@dynamic providersArray, providersArray_Count;
@dynamic hasDiscover, discover;
@dynamic hasSearch, search;

typedef struct WAMusicListOptions__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *providersArray;
  WAMusicListOptions_Discover *discover;
  WAMusicListOptions_Search *search;
} WAMusicListOptions__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "providersArray",
        .dataTypeSpecific.clazz = GPBObjCClass(WAMusicEntry),
        .number = WAMusicListOptions_FieldNumber_ProvidersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(WAMusicListOptions__storage_, providersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "discover",
        .dataTypeSpecific.clazz = GPBObjCClass(WAMusicListOptions_Discover),
        .number = WAMusicListOptions_FieldNumber_Discover,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WAMusicListOptions__storage_, discover),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "search",
        .dataTypeSpecific.clazz = GPBObjCClass(WAMusicListOptions_Search),
        .number = WAMusicListOptions_FieldNumber_Search,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WAMusicListOptions__storage_, search),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(WAMusicListOptions)
                                   messageName:@"ListOptions"
                               fileDescription:&WAMusicMusicRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WAMusicListOptions__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WAMusicListOptions_Discover

@implementation WAMusicListOptions_Discover

@dynamic categoriesArray, categoriesArray_Count;

typedef struct WAMusicListOptions_Discover__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *categoriesArray;
} WAMusicListOptions_Discover__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "categoriesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(WAMusicEntry),
        .number = WAMusicListOptions_Discover_FieldNumber_CategoriesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(WAMusicListOptions_Discover__storage_, categoriesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(WAMusicListOptions_Discover)
                                   messageName:@"Discover"
                               fileDescription:&WAMusicMusicRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WAMusicListOptions_Discover__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(WAMusicListOptions)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WAMusicListOptions_Search

@implementation WAMusicListOptions_Search

@dynamic scopesArray, scopesArray_Count;

typedef struct WAMusicListOptions_Search__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *scopesArray;
} WAMusicListOptions_Search__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "scopesArray",
        .dataTypeSpecific.clazz = Nil,
        .number = WAMusicListOptions_Search_FieldNumber_ScopesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(WAMusicListOptions_Search__storage_, scopesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(WAMusicListOptions_Search)
                                   messageName:@"Search"
                               fileDescription:&WAMusicMusicRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WAMusicListOptions_Search__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(WAMusicListOptions)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WAMusicEntry

@implementation WAMusicEntry

@dynamic id_p;
@dynamic name;

typedef struct WAMusicEntry__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *name;
} WAMusicEntry__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = WAMusicEntry_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WAMusicEntry__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = WAMusicEntry_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WAMusicEntry__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(WAMusicEntry)
                                   messageName:@"Entry"
                               fileDescription:&WAMusicMusicRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WAMusicEntry__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WAMusicTrackDetails

@implementation WAMusicTrackDetails

@dynamic id_p;
@dynamic title;
@dynamic description_p;
@dynamic hasAuthor, author;
@dynamic formatsArray, formatsArray_Count;
@dynamic hasThumbnail, thumbnail;
@dynamic duration;
@dynamic views;
@dynamic hasDashManifestURL, dashManifestURL;
@dynamic hasHlsManifestURL, hlsManifestURL;
@dynamic relatedTracksArray, relatedTracksArray_Count;

typedef struct WAMusicTrackDetails__storage_ {
  uint32_t _has_storage_[1];
  int32_t views;
  NSString *id_p;
  NSString *title;
  NSString *description_p;
  WAMusicAuthor *author;
  NSMutableArray *formatsArray;
  NSString *thumbnail;
  NSString *dashManifestURL;
  NSString *hlsManifestURL;
  NSMutableArray *relatedTracksArray;
  double duration;
} WAMusicTrackDetails__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = WAMusicTrackDetails_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WAMusicTrackDetails__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "title",
        .dataTypeSpecific.clazz = Nil,
        .number = WAMusicTrackDetails_FieldNumber_Title,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WAMusicTrackDetails__storage_, title),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.clazz = Nil,
        .number = WAMusicTrackDetails_FieldNumber_Description_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(WAMusicTrackDetails__storage_, description_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "author",
        .dataTypeSpecific.clazz = GPBObjCClass(WAMusicAuthor),
        .number = WAMusicTrackDetails_FieldNumber_Author,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(WAMusicTrackDetails__storage_, author),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "formatsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(WAMusicTrackDetails_Format),
        .number = WAMusicTrackDetails_FieldNumber_FormatsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(WAMusicTrackDetails__storage_, formatsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "thumbnail",
        .dataTypeSpecific.clazz = Nil,
        .number = WAMusicTrackDetails_FieldNumber_Thumbnail,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(WAMusicTrackDetails__storage_, thumbnail),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "duration",
        .dataTypeSpecific.clazz = Nil,
        .number = WAMusicTrackDetails_FieldNumber_Duration,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(WAMusicTrackDetails__storage_, duration),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "views",
        .dataTypeSpecific.clazz = Nil,
        .number = WAMusicTrackDetails_FieldNumber_Views,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(WAMusicTrackDetails__storage_, views),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "dashManifestURL",
        .dataTypeSpecific.clazz = Nil,
        .number = WAMusicTrackDetails_FieldNumber_DashManifestURL,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(WAMusicTrackDetails__storage_, dashManifestURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hlsManifestURL",
        .dataTypeSpecific.clazz = Nil,
        .number = WAMusicTrackDetails_FieldNumber_HlsManifestURL,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(WAMusicTrackDetails__storage_, hlsManifestURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "relatedTracksArray",
        .dataTypeSpecific.clazz = GPBObjCClass(WAMusicTrack),
        .number = WAMusicTrackDetails_FieldNumber_RelatedTracksArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(WAMusicTrackDetails__storage_, relatedTracksArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(WAMusicTrackDetails)
                                   messageName:@"TrackDetails"
                               fileDescription:&WAMusicMusicRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WAMusicTrackDetails__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\002\t\004\250\241!!\000\n\003\250\241!!\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WAMusicTrackDetails_Format

@implementation WAMusicTrackDetails_Format

@dynamic id_p;
@dynamic URL;
@dynamic hasQuality, quality;
@dynamic hasMetadata, metadata;
@dynamic hasMimeType, mimeType;
@dynamic hasExp, exp;

typedef struct WAMusicTrackDetails_Format__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *URL;
  NSString *quality;
  GPBStruct *metadata;
  NSString *mimeType;
  int64_t exp;
} WAMusicTrackDetails_Format__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = WAMusicTrackDetails_Format_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WAMusicTrackDetails_Format__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "URL",
        .dataTypeSpecific.clazz = Nil,
        .number = WAMusicTrackDetails_Format_FieldNumber_URL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WAMusicTrackDetails_Format__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "quality",
        .dataTypeSpecific.clazz = Nil,
        .number = WAMusicTrackDetails_Format_FieldNumber_Quality,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(WAMusicTrackDetails_Format__storage_, quality),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStruct),
        .number = WAMusicTrackDetails_Format_FieldNumber_Metadata,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(WAMusicTrackDetails_Format__storage_, metadata),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "mimeType",
        .dataTypeSpecific.clazz = Nil,
        .number = WAMusicTrackDetails_Format_FieldNumber_MimeType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(WAMusicTrackDetails_Format__storage_, mimeType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "exp",
        .dataTypeSpecific.clazz = Nil,
        .number = WAMusicTrackDetails_Format_FieldNumber_Exp,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(WAMusicTrackDetails_Format__storage_, exp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(WAMusicTrackDetails_Format)
                                   messageName:@"Format"
                               fileDescription:&WAMusicMusicRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WAMusicTrackDetails_Format__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\001\002!!!\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClass:GPBObjCClass(WAMusicTrackDetails)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WAMusicTranscript

@implementation WAMusicTranscript

@dynamic segmentsArray, segmentsArray_Count;

typedef struct WAMusicTranscript__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *segmentsArray;
} WAMusicTranscript__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "segmentsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(WAMusicTranscript_Segment),
        .number = WAMusicTranscript_FieldNumber_SegmentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(WAMusicTranscript__storage_, segmentsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(WAMusicTranscript)
                                   messageName:@"Transcript"
                               fileDescription:&WAMusicMusicRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WAMusicTranscript__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WAMusicTranscript_Segment

@implementation WAMusicTranscript_Segment

@dynamic text;
@dynamic offset;
@dynamic duration;

typedef struct WAMusicTranscript_Segment__storage_ {
  uint32_t _has_storage_[1];
  int32_t offset;
  int32_t duration;
  NSString *text;
} WAMusicTranscript_Segment__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "text",
        .dataTypeSpecific.clazz = Nil,
        .number = WAMusicTranscript_Segment_FieldNumber_Text,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WAMusicTranscript_Segment__storage_, text),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "offset",
        .dataTypeSpecific.clazz = Nil,
        .number = WAMusicTranscript_Segment_FieldNumber_Offset,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WAMusicTranscript_Segment__storage_, offset),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "duration",
        .dataTypeSpecific.clazz = Nil,
        .number = WAMusicTranscript_Segment_FieldNumber_Duration,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(WAMusicTranscript_Segment__storage_, duration),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(WAMusicTranscript_Segment)
                                   messageName:@"Segment"
                               fileDescription:&WAMusicMusicRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WAMusicTranscript_Segment__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(WAMusicTranscript)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WAMusicAuthor

@implementation WAMusicAuthor

@dynamic id_p;
@dynamic name;
@dynamic hasThumbnail, thumbnail;

typedef struct WAMusicAuthor__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *name;
  NSString *thumbnail;
} WAMusicAuthor__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = WAMusicAuthor_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WAMusicAuthor__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = WAMusicAuthor_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WAMusicAuthor__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "thumbnail",
        .dataTypeSpecific.clazz = Nil,
        .number = WAMusicAuthor_FieldNumber_Thumbnail,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(WAMusicAuthor__storage_, thumbnail),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(WAMusicAuthor)
                                   messageName:@"Author"
                               fileDescription:&WAMusicMusicRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WAMusicAuthor__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WAMusicTrack

@implementation WAMusicTrack

@dynamic id_p;
@dynamic title;
@dynamic kind;
@dynamic hasAuthor, author;
@dynamic hasThumbnail, thumbnail;

typedef struct WAMusicTrack__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *title;
  NSString *kind;
  WAMusicAuthor *author;
  NSString *thumbnail;
} WAMusicTrack__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = WAMusicTrack_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WAMusicTrack__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "title",
        .dataTypeSpecific.clazz = Nil,
        .number = WAMusicTrack_FieldNumber_Title,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WAMusicTrack__storage_, title),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "kind",
        .dataTypeSpecific.clazz = Nil,
        .number = WAMusicTrack_FieldNumber_Kind,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(WAMusicTrack__storage_, kind),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "author",
        .dataTypeSpecific.clazz = GPBObjCClass(WAMusicAuthor),
        .number = WAMusicTrack_FieldNumber_Author,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(WAMusicTrack__storage_, author),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "thumbnail",
        .dataTypeSpecific.clazz = Nil,
        .number = WAMusicTrack_FieldNumber_Thumbnail,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(WAMusicTrack__storage_, thumbnail),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(WAMusicTrack)
                                   messageName:@"Track"
                               fileDescription:&WAMusicMusicRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WAMusicTrack__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WAMusicListTracks

@implementation WAMusicListTracks

@dynamic itemsArray, itemsArray_Count;
@dynamic hasContinuation, continuation;

typedef struct WAMusicListTracks__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *itemsArray;
  NSString *continuation;
} WAMusicListTracks__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "itemsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(WAMusicTrack),
        .number = WAMusicListTracks_FieldNumber_ItemsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(WAMusicListTracks__storage_, itemsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "continuation",
        .dataTypeSpecific.clazz = Nil,
        .number = WAMusicListTracks_FieldNumber_Continuation,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WAMusicListTracks__storage_, continuation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(WAMusicListTracks)
                                   messageName:@"ListTracks"
                               fileDescription:&WAMusicMusicRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WAMusicListTracks__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WAMusicListSuggestions

@implementation WAMusicListSuggestions

@dynamic suggestionsArray, suggestionsArray_Count;

typedef struct WAMusicListSuggestions__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *suggestionsArray;
} WAMusicListSuggestions__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "suggestionsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = WAMusicListSuggestions_FieldNumber_SuggestionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(WAMusicListSuggestions__storage_, suggestionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(WAMusicListSuggestions)
                                   messageName:@"ListSuggestions"
                               fileDescription:&WAMusicMusicRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WAMusicListSuggestions__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
